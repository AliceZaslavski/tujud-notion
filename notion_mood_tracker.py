import os
import requests

# API v√µtmed keskkonnamuutujatest
NOTION_API_KEY = os.getenv("NOTION_API_KEY")
DATABASE_ID = os.getenv("NOTION_DATABASE_ID")

print("üöÄ Skript k√§ivitub!")
if not NOTION_API_KEY or not DATABASE_ID:
    print("‚ùå API v√µtmed puuduvad! Kontrolli GitHub Secrets.")
    exit(1)

# Notioni tuju ja v√§rvi kaardistus
MOOD_COLORS = {
    "t√§nulik": "#e6fff2",
    "√ºksildane": "#e6ffff",
    "segaduses": "#ffebcc",
    "innustunud": "#ffffb3",
    "√§rev": "#f0b3ff",
    "rahulik": "#ccffcc",
    "vihane": "#ff3333",
    "kurb": "#99e6ff",
    "r√µ√µmus": "#ffb3ff"
}

def get_pages():
    """K√ºsib Notioni kirjed."""
    url = f"https://api.notion.com/v1/databases/{DATABASE_ID}/query"
    headers = {
        "Authorization": f"Bearer {NOTION_API_KEY}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json",
    }
    response = requests.post(url, headers=headers)
    print(f"üîÑ API vastus: {response.status_code}")
    if response.status_code != 200:
        print("‚ùå API error! Kontrolli API v√µtit ja database ID-d.")
        return []
    return response.json().get("results", [])

def update_page_color(page_id, mood):
    """Uuendab Notion kirje v√§rvi."""
    color = MOOD_COLORS.get(mood.lower(), "#ffffff")
    url = f"https://api.notion.com/v1/pages/{page_id}"
    headers = {
        "Authorization": f"Bearer {NOTION_API_KEY}",
        "Notion-Version": "2022-06-28",
        "Content-Type": "application/json",
    }
    data = {
        "properties": {
            "V√§rv": {"rich_text": [{"text": {"content": color}}]}
        }
    }
    response = requests.patch(url, headers=headers, json=data)
    print(f"üé® Uuendasin {mood} v√§rviks {color}: {response.status_code}")

# K√§ivitame skripti
pages = get_pages()
if pages:
    for page in pages:
        mood = page["properties"].get("Tuju", {}).get("select", {}).get("name", "").lower()
        if mood in MOOD_COLORS:
            update_page_color(page["id"], mood)
